{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ARYAA CHOUDHARI\\\\OneDrive\\\\Documents\\\\weather-app-2\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n/*\r\nTo do:\r\nNight weather shift\r\nChange description\r\nChange the number of boxes so arrows work properly - something about dynamic\r\n*/\n\nimport { useContext, useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [location, setLocation] = useState(\"London\");\n  //Lat is latitude as a float\n  //Lon is longitude as a float\n  const [lat, setLat] = useState(\"51.0\");\n  const [lon, setLon] = useState(\"1.0\");\n  //Changing the weather view from hourly to weekly or vise-versa\n  const [weatherView, setWeatherView] = useState(\"Hourly\");\n  const [offset, setOffset] = useState(0);\n\n  //Used to change the location by passing it to the child component\n\n  //Used to change the latitude\n  const handleLatChange = newLat => {\n    setLat(newLat);\n  };\n  //Used to change the longitude\n  const handleLonChange = newLon => {\n    setLon(newLon);\n  };\n  const handleWeatherViewChange = newWeatherView => {\n    if (weatherView === \"Hourly\" && newWeatherView !== \"Hourly\") {\n      setWeatherView(newWeatherView);\n      setOffset(0);\n    } else if (weatherView === \"Weekly\" && newWeatherView !== \"Weekly\") {\n      setWeatherView(newWeatherView);\n      setOffset(0);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(SearchBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"main\",\n        children: [/*#__PURE__*/_jsxDEV(Weather, {\n          location: location,\n          lat: lat,\n          lon: lon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MainInformation, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"forecasts\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Forecast, {\n            type: \"Hourly\",\n            onWeatherViewChange: () => handleWeatherViewChange(\"Hourly\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Forecast, {\n            type: \"Weekly\",\n            onWeatherViewChange: () => handleWeatherViewChange(\"Weekly\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(WeatherContainer, {\n            lat: lat,\n            lon: lon,\n            currentWeatherView: weatherView,\n            offset: offset,\n            onOffsetChange: offset => setOffset(offset)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n// search bar should have 2 modes - light and dark - only dark implemented\n_s(App, \"Afw1uZhIBVcXDsCCjnychiOgLr4=\");\n_c = App;\nfunction SearchBar() {\n  const handleLocationChange = newLocation => {\n    setLocation(newLocation);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"search-bar\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      class: \"location-icon\",\n      src: \"location-icon-dark.png\",\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"search-bar-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"location-input\",\n        placeholder: \"Search for location\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleLocationChange('london'),\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          class: \"search-icon\",\n          src: \"search-icon-dark.png\",\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 65\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n\n// logo component should have 2 modes - light and dark - only dark implemented \n_c2 = SearchBar;\nfunction Logo() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"logo\",\n    children: /*#__PURE__*/_jsxDEV(\"img\", {\n      class: \"logo-img\",\n      src: \"logo-dark.png\",\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\n//Displays the current weather information\n_c3 = Logo;\nfunction Weather({\n  location,\n  lat,\n  lon\n}) {\n  _s2();\n  const [temp, setTemp] = useState(0);\n  const [weatherType, setWeatherType] = useState(0);\n  const [humidity, setHumidity] = useState(0);\n  const [wind, setWind] = useState(0);\n  useEffect(() => {\n    const APIKey = '137d15d7a9080968e84a1462718ab6e2';\n\n    //Fetch the data with metric units\n    //No way to get precipitation - not in JSON response\n    fetch(`https://pro.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${APIKey}&units=metric`).then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n    })\n    //Data isn't hourly but every three hours\n    .then(data => {\n      setTemp(Math.round(data['main']['temp']));\n      //Rain has light rain and moderate rain, to get the appropriate type the description is needed\n      setWeatherType(data['weather'][0]['main'] === \"Rain\" ? data['weather'][0]['description'] : data['weather'][0]['main']);\n      setHumidity(data['main']['humidity']);\n      //Windspeed recieved in m/s, to convert to km/h multiply by 3.6\n      setWind(Math.round(data['wind']['speed'], 2) * 3.6);\n    });\n  }, [location, lat, lon]);\n  let imageSrc = getWeatherImage(weatherType);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"main-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"main-location\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" \", location, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" \", weatherType, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"main-weather-icon\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        class: \"main-weather-img\",\n        src: imageSrc,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"main-temperature\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" \", temp, \"\\xB0 \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"main-information\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"humidity\",\n        children: [\" Humidity: \", humidity, \"% \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"wind\",\n        children: [\" Wind speed: \", wind, \" km/h \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n}\n\n//Add information from API\n_s2(Weather, \"T2T0W10Vq/MLXD18kVg7caj/vy8=\");\n_c4 = Weather;\nfunction MainInformation() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"main-info\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"current weather description and information goes here..\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n}\n\n//Button for each forecast view\n//Hourly and Weekly\n//Weekly forecast can't be done - no API data for days\n_c5 = MainInformation;\nfunction Forecast({\n  type,\n  onWeatherViewChange\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    class: \"forecast-btn\",\n    onClick: onWeatherViewChange,\n    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\" \", type, \" Forecast \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n}\n\n//Gets the weather data for each hour\n_c6 = Forecast;\nfunction WeatherContainer({\n  lat,\n  lon,\n  currentWeatherView,\n  offset,\n  onOffsetChange\n}) {\n  _s3();\n  const numOfBoxes = 8;\n  const [maxBoxes, setMaxBoxes] = useState(24);\n  const [weatherData, setWeatherData] = useState([]);\n  useEffect(() => {\n    const APIKey = '137d15d7a9080968e84a1462718ab6e2';\n    //Fetch the data with metric units\n    if (currentWeatherView === \"Hourly\") {\n      setMaxBoxes(24);\n      fetch(`https://pro.openweathermap.org/data/2.5/forecast/hourly?lat=${lat}&lon=${lon}&appid=${APIKey}&cnt=24&units=metric`).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n      }).then(data => {\n        let hourData = data['list'];\n        //Intialise the array\n        let newWeatherData = [];\n        for (let i = 0; i < numOfBoxes; i++) {\n          //Get the data from the JSON\n          let id = offset + i;\n          let time = Number(hourData[id]['dt_txt'].split(' ')[1].split(\":\")[0]);\n          time = formatTime(time);\n          let temp = Math.round(hourData[id]['main']['temp']);\n          let weatherType = hourData[id]['weather'][0]['main'];\n          if (weatherType === \"Rain\") {\n            weatherType = hourData[id]['weather'][0]['description'];\n          }\n          newWeatherData.push({\n            id: id,\n            time: time,\n            temp: temp,\n            weatherType: weatherType\n          });\n        }\n        setWeatherData(newWeatherData);\n      });\n    } else if (currentWeatherView === \"Weekly\") {\n      setMaxBoxes(8);\n      fetch(`https://pro.openweathermap.org/data/2.5/forecast/daily?lat=${lat}&lon=${lon}&appid=${APIKey}&cnt=${numOfBoxes}&units=metric`).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n      }).then(data => {\n        let dailyData = data['list'];\n        let newWeatherData = [];\n        for (let i = 0; i < numOfBoxes; i++) {\n          let id = offset + i;\n          //Multiply by 1000 because Date uses milliseconds\n          let time = new Date(Number(dailyData[id]['dt'] * 1000));\n          let timeString = findDay(time.getDay()) + \" \" + time.getDate();\n          let temp = Math.round(dailyData[id]['temp']['day']);\n          let weatherType = dailyData[id]['weather'][0]['main'];\n          if (weatherType === \"Rain\") {\n            weatherType = dailyData[id]['weather'][0]['description'];\n          }\n          newWeatherData.push({\n            id: id,\n            time: timeString,\n            temp: temp,\n            weatherType: weatherType\n          });\n        }\n        setWeatherData(newWeatherData);\n      });\n    }\n  }, [lat, lon, offset, currentWeatherView]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"weather-container\",\n    children: [offset >= numOfBoxes && /*#__PURE__*/_jsxDEV(\"img\", {\n      class: \"arrow\",\n      src: \"arrow-dark-back.png\",\n      alt: \"\",\n      onClick: () => onOffsetChange(offset => offset - numOfBoxes)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 32\n    }, this), weatherData.map(weather => {\n      return /*#__PURE__*/_jsxDEV(WeatherInfoBox, {\n        time: weather.time,\n        temp: weather.temp,\n        weatherType: weather.weatherType\n      }, weather.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 17\n      }, this);\n    }), offset + numOfBoxes < maxBoxes && /*#__PURE__*/_jsxDEV(\"img\", {\n      class: \"arrow\",\n      src: \"arrow-dark-forward.png\",\n      alt: \"\",\n      onClick: () => onOffsetChange(offset => offset + numOfBoxes)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 42\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this);\n}\n\n//Formats the time\n_s3(WeatherContainer, \"+VFdyGBaV0K8pjsaJfamC94mlYI=\");\n_c7 = WeatherContainer;\nfunction formatTime(time) {\n  if (time < 12) {\n    if (time === 0) {\n      time = \"12 AM\";\n    } else {\n      time = time + \" AM\";\n    }\n  } else {\n    if (time === 12) {\n      time = \"12 PM\";\n    } else {\n      time = time % 12 + \" PM\";\n    }\n  }\n  return time;\n}\n\n//Converts the day from a number into the string for the day\n//Starts at 0 - Sunday\nfunction findDay(day) {\n  const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\n  return days[day];\n}\nfunction WeatherInfoBox({\n  time,\n  temp,\n  weatherType\n}) {\n  let imageSrc = getWeatherImage(weatherType);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"box\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\" \", time, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" \", temp, \"\\xB0 \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      class: \"weather-icon-small\",\n      src: imageSrc,\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 273,\n    columnNumber: 5\n  }, this);\n}\n\n//Gets the weather image based on weatherType\n_c8 = WeatherInfoBox;\nfunction getWeatherImage(weatherType) {\n  let imageSrc = \"\";\n  if (weatherType === \"Clouds\") {\n    imageSrc = \"white-cloud.png\";\n  } else if (weatherType === \"Clear\") {\n    imageSrc = \"cloud-sunny.png\";\n  } else if (weatherType === \"light rain\") {\n    imageSrc = \"light-rain.png\";\n  } else if (weatherType === \"moderate rain\") {\n    imageSrc = \"heavy-rain.png\";\n  } else if (weatherType === \"Snow\") {\n    imageSrc = \"snowy.png\";\n  }\n  return imageSrc;\n}\n\n/* For getting data from the Weather API */\n\n//Gets the weather data for today, in an area\n//Lat is latitude as a float\n//Lon is longitude as a float\n//The limit for API calls is 2000 per day\nfunction getWeatherData(lat, lon) {\n  const APIKey = '137d15d7a9080968e84a1462718ab6e2';\n  fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${APIKey}`).then(response => {\n    if (response.ok) {\n      console.log(response.clone().json());\n      return response.json(); // Parse the response data as JSON\n    } else {\n      throw new Error('API request failed');\n    }\n  }).then(data => {\n    //Display data\n    console.log(data);\n  }).catch(error => {\n    //Display errors\n    console.error(error);\n  });\n}\nfunction getWeatherDataThreeHour(lat, lon) {\n  const APIKey = '137d15d7a9080968e84a1462718ab6e2';\n  return fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${APIKey}`).then(response => {\n    if (response.ok) {\n      console.log(response.clone().json());\n      return response.json(); // Parse the response data as JSON\n    } else {\n      throw new Error('API request failed');\n    }\n  });\n}\nfunction getWeatherDataThreeHourlocation(location) {\n  const APIKey = '137d15d7a9080968e84a1462718ab6e2';\n  return fetch(`https://api.openweathermap.org/data/2.5/forecast?location=${location}&appid=${APIKey}`).then(response => {\n    if (response.ok) {\n      console.log(response.clone().json());\n      return response.json(); // Parse the response data as JSON\n    } else {\n      throw new Error('API request failed');\n    }\n  });\n}\n\n//For testing that weather works\nfunction WeatherButton() {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => getWeatherDataThreeHour(51.0, 1.0)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 361,\n    columnNumber: 5\n  }, this);\n}\n_c9 = WeatherButton;\nexport default App;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"SearchBar\");\n$RefreshReg$(_c3, \"Logo\");\n$RefreshReg$(_c4, \"Weather\");\n$RefreshReg$(_c5, \"MainInformation\");\n$RefreshReg$(_c6, \"Forecast\");\n$RefreshReg$(_c7, \"WeatherContainer\");\n$RefreshReg$(_c8, \"WeatherInfoBox\");\n$RefreshReg$(_c9, \"WeatherButton\");","map":{"version":3,"names":["useContext","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","location","setLocation","lat","setLat","lon","setLon","weatherView","setWeatherView","offset","setOffset","handleLatChange","newLat","handleLonChange","newLon","handleWeatherViewChange","newWeatherView","children","id","SearchBar","fileName","_jsxFileName","lineNumber","columnNumber","Logo","Weather","MainInformation","Forecast","type","onWeatherViewChange","WeatherContainer","currentWeatherView","onOffsetChange","_c","handleLocationChange","newLocation","class","src","alt","placeholder","onClick","_c2","_c3","_s2","temp","setTemp","weatherType","setWeatherType","humidity","setHumidity","wind","setWind","APIKey","fetch","then","response","ok","json","data","Math","round","imageSrc","getWeatherImage","_c4","_c5","_c6","_s3","numOfBoxes","maxBoxes","setMaxBoxes","weatherData","setWeatherData","hourData","newWeatherData","i","time","Number","split","formatTime","push","dailyData","Date","timeString","findDay","getDay","getDate","map","weather","WeatherInfoBox","_c7","day","days","_c8","getWeatherData","console","log","clone","Error","catch","error","getWeatherDataThreeHour","getWeatherDataThreeHourlocation","WeatherButton","_c9","$RefreshReg$"],"sources":["C:/Users/ARYAA CHOUDHARI/OneDrive/Documents/weather-app-2/src/App.js"],"sourcesContent":["/*\r\nTo do:\r\nNight weather shift\r\nChange description\r\nChange the number of boxes so arrows work properly - something about dynamic\r\n*/\r\n\r\nimport { useContext, useEffect, useState } from \"react\";\r\n\r\nfunction App() {\r\n  const [location, setLocation] = useState(\"London\");\r\n  //Lat is latitude as a float\r\n  //Lon is longitude as a float\r\n  const [lat, setLat] = useState(\"51.0\");\r\n  const [lon, setLon] = useState(\"1.0\");\r\n  //Changing the weather view from hourly to weekly or vise-versa\r\n  const [weatherView, setWeatherView] = useState(\"Hourly\");\r\n  const [offset, setOffset] = useState(0);\r\n\r\n  //Used to change the location by passing it to the child component\r\n  \r\n  //Used to change the latitude\r\n  const handleLatChange = newLat => {\r\n    setLat(newLat);\r\n  }\r\n  //Used to change the longitude\r\n  const handleLonChange = newLon => {\r\n    setLon(newLon);\r\n  }\r\n\r\n  const handleWeatherViewChange  = newWeatherView => {\r\n    if (weatherView === \"Hourly\" && newWeatherView !== \"Hourly\") {\r\n      setWeatherView(newWeatherView);\r\n      setOffset(0);\r\n    }\r\n    else if (weatherView === \"Weekly\" && newWeatherView !== \"Weekly\") {\r\n      setWeatherView(newWeatherView);\r\n      setOffset(0);\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <div id = \"header\">\r\n          <SearchBar></SearchBar>\r\n          <Logo></Logo>\r\n        </div>\r\n        <div id = \"main\">\r\n          <Weather location = {location} lat = {lat} lon = {lon}></Weather>\r\n          <MainInformation></MainInformation>\r\n        </div>\r\n        <div id = \"forecasts\">\r\n          <div>\r\n            <Forecast type = \"Hourly\" onWeatherViewChange = {() => handleWeatherViewChange(\"Hourly\")}></Forecast>\r\n            <Forecast type = \"Weekly\" onWeatherViewChange = {() => handleWeatherViewChange(\"Weekly\")}></Forecast>\r\n          </div>\r\n          <div>\r\n            <WeatherContainer lat = {lat} lon = {lon} currentWeatherView = {weatherView} offset = {offset} onOffsetChange = {(offset) => setOffset(offset)}></WeatherContainer>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n// search bar should have 2 modes - light and dark - only dark implemented\r\nfunction SearchBar() {\r\n\r\n  const handleLocationChange = newLocation => {\r\n    setLocation(newLocation);\r\n  }\r\n  return (\r\n    <div class = \"search-bar\">\r\n      <img class = \"location-icon\" src = \"location-icon-dark.png\" alt = \"\"></img>\r\n      <div class = \"search-bar-input\">\r\n        <input class = \"location-input\" placeholder = \"Search for location\"></input>\r\n        <button onClick = {()=> handleLocationChange('london')}><img class = \"search-icon\" src = \"search-icon-dark.png\" alt = \"\"></img></button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n// logo component should have 2 modes - light and dark - only dark implemented \r\nfunction Logo() {\r\n  return (\r\n    <div class = \"logo\">\r\n      <img class = \"logo-img\" src = \"logo-dark.png\" alt = \"\"></img>\r\n    </div>\r\n  )\r\n}\r\n\r\n//Displays the current weather information\r\nfunction Weather({location, lat, lon}) {\r\n  const [temp, setTemp] = useState(0);\r\n  const [weatherType, setWeatherType] = useState(0);\r\n  const [humidity, setHumidity] = useState(0);\r\n  const [wind, setWind] = useState(0);\r\n\r\n  useEffect(() => {\r\n    const APIKey = '137d15d7a9080968e84a1462718ab6e2';\r\n\r\n    //Fetch the data with metric units\r\n    //No way to get precipitation - not in JSON response\r\n    fetch(`https://pro.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${APIKey}&units=metric`)\r\n      .then(response => {\r\n        if (response.ok) {\r\n          return response.json();\r\n        }\r\n      })\r\n      //Data isn't hourly but every three hours\r\n      .then(data => {\r\n        setTemp(Math.round(data['main']['temp']));\r\n        //Rain has light rain and moderate rain, to get the appropriate type the description is needed\r\n        setWeatherType(data['weather'][0]['main'] === \"Rain\" ? data['weather'][0]['description'] : data['weather'][0]['main']);\r\n        setHumidity(data['main']['humidity']);\r\n        //Windspeed recieved in m/s, to convert to km/h multiply by 3.6\r\n        setWind(Math.round(data['wind']['speed'], 2) * 3.6);\r\n      })\r\n  }, [location, lat, lon])\r\n\r\n  let imageSrc = getWeatherImage(weatherType);\r\n\r\n  return (\r\n    <div class = \"main-container\">\r\n      <div class = \"main-location\">\r\n        <h1> {location} </h1>\r\n        <p> {weatherType} </p>   \r\n      </div>\r\n      <div class = \"main-weather-icon\">\r\n        <img class = \"main-weather-img\" src = {imageSrc} alt = \"\"></img>\r\n      </div>\r\n      <div class = \"main-temperature\">\r\n        <h1> {temp}° </h1>\r\n      </div>\r\n      <div class = \"main-information\">\r\n        <div class = \"humidity\"> Humidity: {humidity}% </div>\r\n        <div class = \"wind\"> Wind speed: {wind} km/h </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n//Add information from API\r\nfunction MainInformation() {\r\n  return (\r\n    <div class = \"main-info\">\r\n      <p>current weather description and information goes here..</p>\r\n    </div>\r\n  )\r\n}\r\n\r\n//Button for each forecast view\r\n//Hourly and Weekly\r\n//Weekly forecast can't be done - no API data for days\r\nfunction Forecast({type, onWeatherViewChange}) {\r\n  return (\r\n    <button class = \"forecast-btn\" onClick = {onWeatherViewChange}>\r\n      <h2> {type} Forecast </h2>\r\n    </button>\r\n  )\r\n}\r\n\r\n//Gets the weather data for each hour\r\nfunction WeatherContainer({lat, lon, currentWeatherView, offset, onOffsetChange}) {\r\n  const numOfBoxes = 8;\r\n  const [maxBoxes, setMaxBoxes] = useState(24);\r\n  const [weatherData, setWeatherData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const APIKey = '137d15d7a9080968e84a1462718ab6e2';\r\n    //Fetch the data with metric units\r\n    if (currentWeatherView === \"Hourly\") {\r\n      setMaxBoxes(24);\r\n      fetch(`https://pro.openweathermap.org/data/2.5/forecast/hourly?lat=${lat}&lon=${lon}&appid=${APIKey}&cnt=24&units=metric`)\r\n        .then(response => {\r\n          if (response.ok) {\r\n            return response.json();\r\n          }\r\n        })\r\n        .then(data => {\r\n          let hourData = data['list'];\r\n          //Intialise the array\r\n          let newWeatherData = [];\r\n          for (let i = 0; i < numOfBoxes; i++) {\r\n            //Get the data from the JSON\r\n            let id = offset + i;\r\n            let time = Number(hourData[id]['dt_txt'].split(' ')[1].split(\":\")[0]);\r\n            time = formatTime(time);\r\n            let temp = Math.round(hourData[id]['main']['temp']);\r\n            let weatherType = hourData[id]['weather'][0]['main'];\r\n            if (weatherType === \"Rain\") {\r\n              weatherType = hourData[id]['weather'][0]['description']\r\n            }\r\n            newWeatherData.push({id: id, time: time, temp: temp, weatherType: weatherType});\r\n          }\r\n          setWeatherData(newWeatherData);\r\n        })\r\n    }\r\n    else if (currentWeatherView === \"Weekly\") {\r\n      setMaxBoxes(8);\r\n      fetch(`https://pro.openweathermap.org/data/2.5/forecast/daily?lat=${lat}&lon=${lon}&appid=${APIKey}&cnt=${numOfBoxes}&units=metric`)\r\n        .then(response => {\r\n          if (response.ok) {\r\n            return response.json();\r\n          }\r\n        })\r\n        .then(data => {\r\n          let dailyData = data['list'];\r\n          let newWeatherData = [];\r\n          for (let i = 0; i < numOfBoxes; i++) {\r\n            let id = offset + i;\r\n            //Multiply by 1000 because Date uses milliseconds\r\n            let time = new Date(Number(dailyData[id]['dt'] * 1000));\r\n            let timeString = findDay(time.getDay()) + \" \" + time.getDate();\r\n            let temp = Math.round(dailyData[id]['temp']['day']);\r\n            let weatherType = dailyData[id]['weather'][0]['main'];\r\n            if (weatherType === \"Rain\") {\r\n              weatherType = dailyData[id]['weather'][0]['description'];\r\n            }\r\n            newWeatherData.push({id: id, time: timeString, temp: temp, weatherType: weatherType});\r\n          }\r\n          setWeatherData(newWeatherData);\r\n        })\r\n    }\r\n  }, [lat, lon, offset, currentWeatherView])\r\n\r\n  return (\r\n    <div class = \"weather-container\">\r\n      {offset >= numOfBoxes && <img class = \"arrow\" src = \"arrow-dark-back.png\" alt = \"\" onClick = {() => onOffsetChange(offset => offset - numOfBoxes)}></img>}\r\n      {weatherData.map(weather => {\r\n        return (<WeatherInfoBox key = {weather.id} time = {weather.time} temp = {weather.temp} weatherType = {weather.weatherType}></WeatherInfoBox>)\r\n      })}\r\n      {offset + numOfBoxes < maxBoxes && <img class = \"arrow\" src = \"arrow-dark-forward.png\" alt = \"\" onClick = {() => onOffsetChange(offset => offset + numOfBoxes)}></img>}\r\n    </div>\r\n  )\r\n}\r\n\r\n//Formats the time\r\nfunction formatTime(time) {\r\n  if (time < 12) {\r\n    if (time === 0) {\r\n      time = \"12 AM\";\r\n    }\r\n    else {\r\n      time = time + \" AM\";\r\n    }\r\n  }\r\n  else {\r\n    if (time === 12) {\r\n      time = \"12 PM\"\r\n    }\r\n    else {\r\n      time = time % 12 + \" PM\";\r\n    }\r\n  }\r\n  return time;\r\n}\r\n\r\n//Converts the day from a number into the string for the day\r\n//Starts at 0 - Sunday\r\nfunction findDay(day) {\r\n  const days = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"];\r\n  return days[day];\r\n}\r\n\r\nfunction WeatherInfoBox({time, temp, weatherType}) {\r\n  let imageSrc = getWeatherImage(weatherType);\r\n  return (\r\n    <div class = \"box\">\r\n      <h1> {time} </h1>\r\n      <p> {temp}° </p>\r\n      <img class = \"weather-icon-small\" src = {imageSrc} alt = \"\"></img>\r\n    </div>\r\n  )\r\n}\r\n\r\n//Gets the weather image based on weatherType\r\nfunction getWeatherImage(weatherType) {\r\n  let imageSrc = \"\";\r\n  if (weatherType === \"Clouds\") {\r\n    imageSrc = \"white-cloud.png\";\r\n  }\r\n  else if (weatherType === \"Clear\") {\r\n    imageSrc = \"cloud-sunny.png\";\r\n  }\r\n  else if (weatherType === \"light rain\") {\r\n    imageSrc = \"light-rain.png\";\r\n  }\r\n  else if (weatherType === \"moderate rain\") {\r\n    imageSrc = \"heavy-rain.png\";\r\n  }\r\n  else if (weatherType === \"Snow\") {\r\n    imageSrc = \"snowy.png\";\r\n  }\r\n  return imageSrc;\r\n}\r\n\r\n/* For getting data from the Weather API */\r\n\r\n//Gets the weather data for today, in an area\r\n//Lat is latitude as a float\r\n//Lon is longitude as a float\r\n//The limit for API calls is 2000 per day\r\nfunction getWeatherData(lat, lon) {\r\n  const APIKey = '137d15d7a9080968e84a1462718ab6e2';\r\n\r\n  fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${APIKey}`)\r\n    .then(response => {\r\n      if (response.ok) {\r\n        console.log(response.clone().json());\r\n        return response.json(); // Parse the response data as JSON\r\n      } else {\r\n        throw new Error('API request failed');\r\n      }\r\n    })\r\n    .then(data => {\r\n      //Display data\r\n      console.log(data);\r\n    })\r\n    .catch(error => {\r\n      //Display errors\r\n      console.error(error);\r\n    });\r\n}\r\n\r\nfunction getWeatherDataThreeHour(lat, lon) {\r\n  const APIKey = '137d15d7a9080968e84a1462718ab6e2';\r\n\r\n  return fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${APIKey}`)\r\n    .then(response => {\r\n      if (response.ok) {\r\n        console.log(response.clone().json());\r\n        return response.json(); // Parse the response data as JSON\r\n      } else {\r\n        throw new Error('API request failed');\r\n      }\r\n    })\r\n}\r\n\r\nfunction getWeatherDataThreeHourlocation(location) {\r\n  const APIKey = '137d15d7a9080968e84a1462718ab6e2';\r\n\r\n  return fetch(`https://api.openweathermap.org/data/2.5/forecast?location=${location}&appid=${APIKey}`)\r\n    .then(response => {\r\n      if (response.ok) {\r\n        console.log(response.clone().json());\r\n        return response.json(); // Parse the response data as JSON\r\n      } else {\r\n        throw new Error('API request failed');\r\n      }\r\n    })\r\n}\r\n\r\n//For testing that weather works\r\nfunction WeatherButton() {\r\n  return (\r\n    <button onClick = {() => getWeatherDataThreeHour(51.0, 1.0)}></button>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default App;\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}